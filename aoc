#!/bin/bash


AOC_INPUT_URL_TPL="https://adventofcode.com/2020/day/<day>/input"


MY_NAME="$(basename "$0")"
MY_PATH="$0"
MY_WDIR="$(dirname "$0")"


language="c"
day="$(date '+%d')"
part="1"
subcmd=""
test_all="false"
test_watch="false"

usage() {
    cat <<EOF
Usage:
    $MY_NAME solve --day=<day> [--part=<part>]
    $MY_NAME test (--day=<day> [--part=<part>] | --all) [--watch]
    $MY_NAME (-h | --help)

Options:
    -d --day=<day>          Which day's puzzle you want to test/run [default: $day].
                            The default changes with the day as the AoC progresses.
    -p --part=<part>        Part 1 or 2 of the day's puzzle [default: 1].
    -a --all                Test the solvers for all the days, instead of just the one for a single day (part)
                            its puzzle.
    -w --watch              Wait and rerun the test when an inotify event occurs.
    -h --help               Show this help.
EOF
}

extract_opt_arg() {
    echo "${1#*=}"
}
case "$1" in
    solve | test)
        subcmd="$1"
        ;;
    --help | -h)
        usage
        exit 0
        ;;
    *)
        echo -e "\033[31mSpecify either the \033[1msolve\033[22m or the \033[1mtest\033[22m subcommand.\033[0m"
        usage
        exit 1
        ;;
esac
shift
while [ -n "$1" ]; do
    case "$1" in
        --day | -d)
            day="$2"
            shift
            ;;
        --day=*)
            day="$(extract_opt_arg "$1")"
            ;;
        --part | -p)
            part="$2"
            shift
            ;;
        --part=*)
            part="$(extract_opt_arg "$1")"
            ;;
        --all | -a)
            test_all="true"
            ;;
        --watch | -w)
            test_watch="true"
            ;;
        --language | -l)
            language="$2"
            shift
            ;;
        --language=*)
            language="$(extract_opt_arg "$1")"
            ;;
    esac
    shift
done

day_url="${AOC_INPUT_URL_TPL/<day>/$day}"
day_input_url="$day_url/input"
day_padded="day$(printf "%02d" "$day")"
day_bin="$day_padded.$language/solve"
day_part="$day_padded-part$part"

test_solution() {
    local day_example_in="${day_padded}.example.in.txt"
    local day_part_example_out="$(cat "${day_part}.example.out.txt")"
    local test_output="$("$day_bin" "$part" < "$day_example_in" 2>&1)"
    local test_result=$?
    echo -e "aoc test --day=\e[1m$day\e[0m --part=\e[1m$part\e[0m"
    echo -ne "    expected output = \e[1m$day_part_example_out\e[0m"
    if [ "$day_part_example_out" != "$test_output" ]; then
        echo -e "\e[31m â‰  actual output = \e[1m${test_output}\e[0m"
        echo -e "    \e[1m$day_bin\e[22m returned with exit code \e[1m$test_result\e[0m."
    else
        echo -e "\e[32m = actual output = \e[1m${test_output}\e[0m"
    fi
}

test_all() {
    "$MY_PATH" test --day 1 --part 1
    "$MY_PATH" test --day 1 --part 2
}

test() {
    if [ "$test_all" = "true" ]; then
        test_all
    else
        test_solution
    fi
}

solve() {
    if [ -z "$AOC_SESSION_ID" ]; then
        echo -e "\033[31mThe \033[1m\$AOC_SESSION_ID\033[22m environment variable must be set."
        echo -e "Unable to fetch today's input from: \033[1m$day_input_url\033[0m"
    fi

    curl --cookie "session=$AOC_SESSION_ID" "$day_input_url" 2>/dev/null | "$day_bin" -p "$part"
}

$subcmd
